{"version":3,"file":"how-vector-databases-make-ai-smart_B-z-hEQz.mjs","sources":["../../../src/images/blog/similarity-search-embeddings.png","../../../src/images/blog/simplified-vector-space.png","../../../src/images/blog/rag-diagram.png","../../../src/content/blog/how-vector-databases-make-ai-smart.mdx"],"sourcesContent":["export default \n\t\t\t\t\t\tnew Proxy({\"src\":\"__ASTRO_ASSET_IMAGE__D$t7QRyq__\",\"width\":1080,\"height\":720,\"format\":\"png\"}, {\n\t\t\t\t\t\tget(target, name, receiver) {\n\t\t\t\t\t\t\tif (name === 'clone') {\n\t\t\t\t\t\t\t\treturn structuredClone(target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (name === 'fsPath') {\n\t\t\t\t\t\t\t\treturn \"/workspace/src/images/blog/similarity-search-embeddings.png\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn target[name];\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t","export default \n\t\t\t\t\t\tnew Proxy({\"src\":\"__ASTRO_ASSET_IMAGE__BgsMqdaZ__\",\"width\":2586,\"height\":1724,\"format\":\"png\"}, {\n\t\t\t\t\t\tget(target, name, receiver) {\n\t\t\t\t\t\t\tif (name === 'clone') {\n\t\t\t\t\t\t\t\treturn structuredClone(target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (name === 'fsPath') {\n\t\t\t\t\t\t\t\treturn \"/workspace/src/images/blog/simplified-vector-space.png\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn target[name];\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t","export default \n\t\t\t\t\t\tnew Proxy({\"src\":\"__ASTRO_ASSET_IMAGE__CBqiCNRU__\",\"width\":2856,\"height\":1904,\"format\":\"png\"}, {\n\t\t\t\t\t\tget(target, name, receiver) {\n\t\t\t\t\t\t\tif (name === 'clone') {\n\t\t\t\t\t\t\t\treturn structuredClone(target);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (name === 'fsPath') {\n\t\t\t\t\t\t\t\treturn \"/workspace/src/images/blog/rag-diagram.png\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treturn target[name];\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t","---\ntitle: How Vector Databases make AI smart\npublishDate: 01-12-2024\nupdatedDate: 01-12-2024\ndescription: LLMs can answer questions they have been trained to answer. But how can you teach an old LLM new tricks? How Vector Databases are the unseen hero of AI.\nheroImage: ../../images/blog/vectorspace-thumbnail.png\nheroImageAlt: \"a collection of icospheres within a tesseract, depicting multi-dimensional vector space.\"\nslug: how-vector-databases-make-ai-smart\ntags:\n  - technology\n---\n\nimport { Image } from \"astro:assets\";\nimport Embeddings from \"../../images/blog/similarity-search-embeddings.png\";\nimport VectorSpace from \"../../images/blog/simplified-vector-space.png\";\nimport Brain from \"../../images/blog/download-brain.png\";\nimport RAGDiagram from \"../../images/blog/rag-diagram.png\";\n\nLLMs like OpenAI's GPT-4 were trained on nearly every book, article, and paper ever written. Ask ChatGPT what team won the World Cup in 2022, it will confidently answer correctly `Argentina`. But this is data the LLM has been _trained_ on. Try asking an LLM (ignoring ChatGPT Pro's web browsing capability) about a more current event, or one it likely doesn't have data on, such as, who won your local high school football game last night and it will usually invent a nonsense answer.\n\n## ChatGPT isn't business-ready on its own\n\nWhile ChatGPT is amusing for some, and even valuable for simple general tasks, it lacks the ability to learn new information, nor can it complete automated tasks. A typical suggested use-case for a ChatGPT agent is to replace customer service agents, but out-of-the-box ChatGPT has no context of your business, your customers, or your products.\n\n### Prompt instructions are not knowledge\n\nIf you have used or dabbled with the ChatGPT API, or seen the \"custom instructions\" feature of ChatGPT (or [created a custom GPT](https://techsquidtv.com/blog/creating-custom-chatgpt-agents-for-fun-and-for-profit/)) you may know that it is possible to supply a \"system\" prompt, or \"instructions. This is essentially how you would _program_ your customized ChatGPT agent.\n\nWhile you can put in some basic information in here you would like your GPT agent to know, like your business name, phone number, and such, there is a limited \"context\". So, it is not feasible to reference all of the data you may need access to. Realistically the amount of information we expect a human (let alone an \"AI\") to retain and recall is incredibly impressive, and to imitate this, will need a different solution.\n\nWhat the system prompt _is_ good for, is for the instructions we give to our GPT agent, telling it how to respond in different scenarios and for fine-tuning responses after testing.\n\n```txt\nPersona: American Male, 35 years old, Customer Service Agent\nTone: Semi-casual, helpful\nContext: Customer is contacting us for a new support request on our SaaS product\n\nObjectives:\n - Ensure to obtain the customer's email address and phone number\n - Capture the customer's request to be logged as a ticket\n - Ensure all of the customer's concerns have been addressed prior to ending any conversation\n```\n\nAnd while the context size of these prompts continues to improve, meaning we _can_ input more data, we will typically find that accuracy suffers. Do not be scared to add detailed information to your system prompt, but always try to add detail in service of improving your results. Test often and update as new scenarios are discovered where you want to teak the behavior.\n\n## How do you teach AI information?\n\nWe may have a comparatively enormous amount of data we want to \"teach\" to our AI, certainly more than would fit in the prompt context. Think about what we as humans are expected to retain, you don't get all of your information from a single source, and you pick up new information over time.\n\n<Image\n  width={720}\n  src={Brain}\n  alt=\"A minimalist 3d render by TechSquidTV of a glass brain downloading information\"\n/>\n\n### Pre-training\n\nThis is how you _create_ a large language model like GPT-4, LLama, and others. This process includes training _enormous_ datasets on arrays of cloud-hosted GPUs. We will not be focusing on this method. This process is incredibly expensive (hundreds of thousands to _millions_ of dollars) and difficult to do well.\n\nBut, we do not need to create our own LLM. Once we have a good LLM as a base, either using paid models like GPT-4, or the many [free open-source LLMs](https://huggingface.co/spaces/HuggingFaceH4/open_llm_leaderboard), we have a few ways to efficiently augment them with the data we need.\n\n### Fine-tuning\n\n[Fine-tuning](https://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset) is the next step in the LLM training process, and once again, this is _not_ what we will be focusing on in this post. Fine-tuning is useful for adjusting and improving an existing model inherently. Above, we talked about using the `system prompt` to give instructions to our LLM on how to behave. Fine-tuning is one of the ways we can help our model understand those types of instructions. Still, this is a highly-specialized process usually taken on by researchers/developers or large businesses. Let's take a look at an example before moving on to what we'll be using.\n\nLet's imagine that we are building a specialized LLM for a national chain of auto-mechanic repair shops. Our goal, is to create an assistant for the technicians, to aid in diagnosing car problems. Luckily, for the past 10+ years, this business has been collecting service ticket data from each customer transaction. This data is proprietary and contains valuable information about automobile diagnosis.\n\nImagine, thousands of customers, hundreds of thousands of service repair tickets with carefully crafted input information. Let's make an example:\n\n```json title=\"Customer Service Ticket\"\n[\n  {\n    \"date\": \"2024-01-01\",\n    \"time\": \"12:00\",\n    \"make\": \"Toyota\",\n    \"model\": \"Corolla\",\n    \"year\": 2016,\n    \"customer_comment\": \"Hearing a thumping noise when driving over 30mph\",\n    \"repair_comment\": \"low pressure in back rear tire, needs rotation\"\n  }\n]\n```\n\nThere could be a database of thousands of these records that could be used to train an LLM specifically _tuned_ to solving automotive problems. Tuned LLMs can give the appearance of \"intelligence\" to the data they are trained on, as the LLM will consider _most likely_ responses to questions, given the enormous dataset.\n\nYou can see a more in-depth example from OpenAI here: https://youtu.be/ahnGLM-RC1Y?si=E3_17X6_9kzjaDxn&t=1591\n\nThis option is still quite expensive and, though we can train our model on data, our output is always non-deterministic, and it is difficult to consistently get accurate responses to specific requests. Excellent choice to start with for large businesses with proprietary data.\n\n### Embeddings\n\nEmbeddings are the secret to creating accurate and \"intelligent\" responses. Embeddings are the result of processing data into what is called a _vector space_. This process converts each \"word\"\\* of our input data into a set of numbers that represents the \"meaning\" of that word (or _really_ collection of `tokens`). With this collection of data, we can do a \"similarity search\" to compare what information we have is most relevant to what the user is asking.\n\nThis is where things start getting very exciting for LLM chat bots, as we can take advantage of this advanced searching algorithm to prime our LLM chat bot with the correct answer before we ask it a question. Keep reading, you'll see what I mean.\n\n<Image\n  width={720}\n  src={Embeddings}\n  alt=\"Word2Vec embedding demonstration showing words represented as columns of data\"\n/>\n\n> source: https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0231189#sec004\n\nIn the English language, we have a lot of words which when written are spelled exactly the same but have entirely different meanings. In some contexts, the meaning of the same word can change based on the words surrounding it. In reality rather than \"words\" we now use \"tokens\" which are smaller chunks of characters, and the data you see in the vector space is the \"meaning\" of each token, even if the \"meaning\" is too abstract to make sense to us humans. To compare the similarity between words, is now simplified as we can look at the \"likeness\" of the vectors representing those words.\n\n## Similarity Search\n\nThe embeddings we mentioned before are created by using an embedding model, such as [Word2Vec](https://www.tensorflow.org/text/tutorials/word2vec) or OpenAI's [text-embedding-ada-002](https://platform.openai.com/docs/guides/embeddings), to create a multi-dimensional \"table\" of data from the content we want to \"teach\" to our LLM. This table contains a collection of each unique word\\* of our data, and the vector representation of that word.\n\n<Image\n  width={720}\n  src={VectorSpace}\n  alt=\"A 3d space filled with groups of like objects. Each group is represented by a vector, and the distance between two groups is represented by the distance between their vectors.\"\n/>\n\n> source: https://odsc.com/blog/getting-started-with-vector-based-search/\n\nIn reality, there will be hundreds or thousands of dimensions of data, but we can only comprehend three dimensions visually. Notice how in this \"vector space\" there are collections of words that are positioned by their likeness. We can see that animals appear on the left, while fruits appear on the right. If we look closer at the left side, we can see that the word \"cat\" and in this depiction, an image of a cat, are located physically near each other. Likewise, we can see there there is a group of tech company logos, Google and Apple, and we can see the Apple company logo is just ever so slightly closer to the collection of fruits than the Google logo.\n\nDistance in these vector spaces is calculated using Cosine Similarity, which is a measure of how similar two vectors are.\n\nhttps://www.youtube.com/watch?v=e9U0QAFbfLI\n\n## RAG (Retrieval-Augmented Generation)\n\nRAG is the latest tech jargon describing a technique of using similarity search and embeddings with LLMs to produce more accurate responses to user questions.\n\n<Image\n  width={720}\n  src={RAGDiagram}\n  alt=\"A diagram showing how a user's input question is paired with the response from the vector database before asking ChatGPT to transform the request into a response.\"\n/>\n\nLet's break down what's happening in this example, and explain why RAG can produce excellent results.\n\nIn our example scenario, we are a tech company with a documentation website that has a lot of useful information, but it is frequently updated and LLMs like ChatGPT are not aware of our business. So when we ask ChatGPT how to install our product's CLI, we are unable to get a valid answer. Instead, we must implement RAG in our own ChatGPT powered assistant.\n\n### Vectorize the documentation\n\nWe first take our input sources and convert them to vector space. There are many ways to achieve this but it is common to use the Postgres database with the pgvector extension. [Supabase](https://supabase.com/docs/guides/ai) has been growing in popularity and offers database hosting and Github Actions that can help update your database as your documentation updates (this is not sponsored).\n\n### Search the vector space for the user's input question\n\nWe query the vector database with the user's input question. The question itself will be converted into an embedding, and then the database will use cosine similarity search to look for relevant information within the documentation. The result of this search will come with a \"confidence\" score, which can be used to determine how likely the response is to be relevant.\n\n```txt title=\"Input Question\"\nWhat is the latest version of the CLI?\n```\n\n### Combine question and vector database response\n\nAssuming we have a response with a fairly high confidence score, we can combine the user's input question with the response from our vector database _before_ we ever reach out to ChatGPT. The trick here is we are not asking ChatGPT to answer the question, we are _giving_ ChatGPT the answer.\n\n```txt title=\"Combined Input\"\nQuestion: What is the latest version of the CLI?\nResponse: npm i package@1.2.3\n```\n\nIn our theoretical example, the Vector Database found the snippet in the documentation which contains the install command for the CLI package, including a version string.\n\n### Ask ChatGPT to transform the response into a human-readable answer\n\nNow that we have a response that is relevant to the user's question, we can ask ChatGPT to transform the response into a human-readable answer. This is where the \"magic\" happens, as ChatGPT is now able to use the response from the vector database to create a response that is relevant to the user's question.\n\n```txt title=\"ChatGPT Response\"\nThe latest version of the CLI is 1.2.3.\n```\n\n## Conclusion\n\n\"RAG\" as it is called now, is not so much the future as it is the _now_. Expect more improved digital assistants to make their way into your average businesses. We are using a popular ChatGPT powered 3rd party RAG-based assistant at my current job and it is truly amazing. These services are integrated in tools like Slack and Discord making information retrieval a natural process we already do every day. I expect we'll see AI assistants in places like fast food drive-throughs, banking assistants, digital receptionists, and so much more in the very near future.\n\nI'll leave you with the reminder that we just passed [ChatGPT's first birthday](https://www.npr.org/2023/11/30/1216005680/what-does-chatgpt-have-to-say-for-itself-on-its-first-birthday), and the pace of improvement is only accelerating. A lot of people 6 months ago thought the AI \"hype\" would be slowing down by now. I can confidently say, we are just getting started.\n"],"names":["_jsx","Brain","Embeddings","VectorSpace","RAGDiagram"],"mappings":"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"}