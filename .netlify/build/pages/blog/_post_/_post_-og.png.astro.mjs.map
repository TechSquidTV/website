{"version":3,"file":"_post_-og.png.astro.mjs","sources":["../../../../../src/components/OpenGraph/createImage.ts","../../../../../src/components/OpenGraph/OG.tsx","../../../../../src/pages/blog/[post]/[post]-og.png.ts"],"sourcesContent":["import fs from \"fs/promises\";\nimport satori from \"satori\";\nimport sharp from \"sharp\";\n\nexport async function SVG(component: JSX.Element) {\n  return await satori(component, {\n    width: 1200,\n    height: 630,\n    fonts: [\n      {\n        name: \"Inter\",\n        data: await fs.readFile(\n          \"./src/images/opengraph/fonts/Inter-Regular.ttf\",\n        ),\n        weight: 400,\n      },\n      {\n        name: \"Inter\",\n        data: await fs.readFile(\n          \"./src/images/opengraph/fonts/Inter-ExtraBold.ttf\",\n        ),\n        weight: 800,\n      },\n    ],\n  });\n}\n\nexport async function PNG(component: JSX.Element) {\n  return await sharp(Buffer.from(await SVG(component)))\n    .png()\n    .toBuffer();\n}\n","export default function OG(\n  title: string = \"TechSquidTV - Kyle from the internet\",\n  heroImageURL: string,\n) {\n  const backgroundImageURL = \"http://localhost:3001/opengraph/tstv-og-bg.png\";\n  const fontSize = (title: string) => {\n    if (title.length < 18) {\n      return \"7rem\";\n    }\n    if (title.length < 28) {\n      return \"5.5rem\";\n    }\n    if (title.length < 46) {\n      return \"5rem\";\n    }\n    if (title.length < 52) {\n      return \"5rem\";\n    }\n    return \"4rem\";\n  };\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        width: \"100%\",\n        height: \"100%\",\n        backgroundImage: `url(${backgroundImageURL})`,\n        backgroundSize: \"cover\",\n        backgroundPosition: \"left\",\n        backgroundRepeat: \"no-repeat\",\n        alignItems: \"center\",\n        position: \"relative\",\n      }}\n    >\n      <h1\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          flex: \"1\",\n          padding: \"2rem 4rem\",\n          fontSize: fontSize(title),\n          textOverflow: \"ellipsis\",\n          overflow: \"hidden\",\n          fontWeight: \"bold\",\n          color: \"white\",\n          fontFamily: \"Inter\",\n          wordBreak: \"break-word\",\n        }}\n      >\n        {title}\n      </h1>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          flex: \"1\",\n          margin: \"2.5rem\",\n        }}\n      >\n        <img\n          src={`http://localhost:3001/blog/${heroImageURL}`}\n          style={{\n            width: \"100%\",\n            height: \"100%\",\n            objectFit: \"cover\",\n            borderRadius: \"24px\",\n          }}\n        />\n      </div>\n      <img\n        src=\"http://localhost:3001/opengraph/tstv-badge.png\"\n        style={{ position: \"absolute\", bottom: \"0\", right: \"0\", zIndex: 100 }}\n        width=\"146px\"\n      />\n    </div>\n  );\n}\n","import { PNG } from \"@components/OpenGraph/createImage\";\nimport OG from \"@components/OpenGraph/OG\";\nimport type { APIRoute, InferGetStaticPropsType } from \"astro\";\nimport { getCollection } from \"astro:content\";\nimport fs from \"fs/promises\";\nimport matter from \"gray-matter\";\n\nexport async function getStaticPaths() {\n  const blog = await getCollection(\"blog\");\n  const blogData = await getBlogFrontmatterCollection();\n  return blog.map((post) => {\n    const postData = blogData.find((data) => data.title === post.data.title);\n    return {\n      params: {\n        post: post.slug,\n      },\n      props: {\n        title: post.data.title,\n        heroImage: postData?.heroImage.replace(\"../../images/blog/\", \"\"),\n      },\n    };\n  });\n}\n\ntype Props = InferGetStaticPropsType<typeof getStaticPaths>;\n\nexport const GET: APIRoute = async function get({ props }) {\n  const { title, heroImage } = props as Props;\n  const png = await PNG(OG(title, heroImage));\n  return new Response(png, {\n    headers: {\n      \"Content-Type\": \"image/png\",\n    },\n  });\n};\n\nconst getBlogFrontmatterCollection = async () => {\n  const contentDir = \"src/content/blog\";\n  const files = await fs.readdir(contentDir);\n\n  // Use a regular expression to match both .md and .mdx files\n  const markdownFiles = files.filter((file) => /\\.(md|mdx)$/.test(file));\n\n  // Process each file and extract frontmatter\n  const frontmatters = await Promise.all(\n    markdownFiles.map(async (file) => {\n      const content = await fs.readFile(`${contentDir}/${file}`, \"utf-8\");\n      const { data } = matter(content);\n      return data;\n    })\n  );\n\n  return frontmatters;\n};\n"],"names":["title"],"mappings":"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"}